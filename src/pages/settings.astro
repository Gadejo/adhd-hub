---
import Layout from '../layouts/Layout.astro';
import TopBar from '../components/TopBar.astro';
---

<Layout title="ADHD Hub - Settings">
  <TopBar title="ADHD Hub" />
  
  <main class="flex-1 p-4 md:p-6 lg:p-8">
    <div class="max-w-4xl mx-auto">
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Settings</h1>
        <p class="text-gray-600 dark:text-gray-400">Customize your ADHD Hub experience</p>
      </div>
      
      <!-- Appearance Settings -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-6 mb-6">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Appearance</h2>
        
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
              Theme
            </label>
            <div class="flex space-x-4">
              <label class="flex items-center">
                <input 
                  type="radio" 
                  name="theme" 
                  value="light" 
                  id="theme-light"
                  class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 dark:border-gray-600"
                >
                <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Light</span>
              </label>
              <label class="flex items-center">
                <input 
                  type="radio" 
                  name="theme" 
                  value="dark" 
                  id="theme-dark"
                  class="focus:ring-blue-500 h-4 w-4 text-blue-600 border-gray-300 dark:border-gray-600"
                >
                <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">Dark</span>
              </label>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Data Management -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-6 mb-6">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Data Management</h2>
        
        <div class="space-y-6">
          <!-- Export Data -->
          <div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Export Data</h3>
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">
              Download all your data as a JSON file for backup or transfer purposes.
            </p>
            <button 
              id="export-data-btn"
              class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors"
            >
              Export All Data
            </button>
          </div>
          
          <!-- Import Data -->
          <div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Import Data</h3>
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">
              Import data from a previously exported JSON file. This will replace all existing data.
            </p>
            <div class="flex items-center space-x-4">
              <label class="relative inline-flex items-center cursor-pointer">
                <input 
                  type="file" 
                  id="import-file-input" 
                  accept=".json"
                  class="sr-only"
                >
                <span class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-medium rounded-lg transition-colors">
                  Choose File to Import
                </span>
              </label>
              <span id="import-file-name" class="text-sm text-gray-600 dark:text-gray-400"></span>
            </div>
          </div>
          
          <!-- Clear Data -->
          <div class="border-t border-gray-200 dark:border-gray-600 pt-6">
            <h3 class="text-lg font-medium text-red-600 dark:text-red-400 mb-2">Danger Zone</h3>
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-4">
              Clear all data permanently. This action cannot be undone.
            </p>
            <button 
              id="clear-data-btn"
              class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-medium rounded-lg transition-colors"
            >
              Clear All Data
            </button>
          </div>
        </div>
      </div>
      
      <!-- App Statistics -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-6 mb-6">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">App Statistics</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="text-center">
            <div id="total-resources-count" class="text-2xl font-bold text-blue-600 dark:text-blue-400">0</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Total Resources</div>
          </div>
          
          <div class="text-center">
            <div id="total-goals-count" class="text-2xl font-bold text-green-600 dark:text-green-400">0</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Total Goals</div>
          </div>
          
          <div class="text-center">
            <div id="total-sessions-count" class="text-2xl font-bold text-purple-600 dark:text-purple-400">0</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Study Sessions</div>
          </div>
        </div>
        
        <div class="mt-6 pt-6 border-t border-gray-200 dark:border-gray-600">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">
            <div>
              <span class="text-gray-600 dark:text-gray-400">Total Study Time:</span>
              <span id="total-study-time" class="ml-2 font-semibold text-gray-900 dark:text-white">0 minutes</span>
            </div>
            <div>
              <span class="text-gray-600 dark:text-gray-400">Data Size:</span>
              <span id="data-size" class="ml-2 font-semibold text-gray-900 dark:text-white">0 KB</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Keyboard Shortcuts -->
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-6">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Keyboard Shortcuts</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="flex justify-between items-center py-2">
            <span class="text-sm text-gray-600 dark:text-gray-400">Start/Pause Timer</span>
            <kbd class="px-2 py-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600">
              Space
            </kbd>
          </div>
          
          <div class="flex justify-between items-center py-2">
            <span class="text-sm text-gray-600 dark:text-gray-400">Focus Search (Resources page)</span>
            <kbd class="px-2 py-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600">
              /
            </kbd>
          </div>
        </div>
        
        <div class="mt-4 p-3 bg-blue-50 dark:bg-blue-900 rounded-lg">
          <p class="text-sm text-blue-800 dark:text-blue-200">
            <strong>Tip:</strong> Keyboard shortcuts work globally throughout the app to help you stay focused and productive.
          </p>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { getAll, setAll, exportJSON, importJSON, updateSettings } from '../lib/storage.js';
  
  function loadSettings() {
    const data = getAll();
    
    // Load theme setting
    const theme = data.settings.theme;
    const themeRadio = document.getElementById(`theme-${theme}`) as HTMLInputElement;
    if (themeRadio) {
      themeRadio.checked = true;
    }
    
    // Update statistics
    updateStatistics(data);
  }
  
  function updateStatistics(data: any) {
    const totalStudyTime = data.sessions.reduce((sum: number, s: any) => sum + s.durationMin, 0);
    const dataString = JSON.stringify(data);
    const dataSizeKB = Math.round(new Blob([dataString]).size / 1024);
    
    document.getElementById('total-resources-count')!.textContent = data.resources.length.toString();
    document.getElementById('total-goals-count')!.textContent = data.goals.length.toString();
    document.getElementById('total-sessions-count')!.textContent = data.sessions.length.toString();
    document.getElementById('total-study-time')!.textContent = `${totalStudyTime} minutes`;
    document.getElementById('data-size')!.textContent = `${dataSizeKB} KB`;
  }
  
  function handleThemeChange(theme: 'light' | 'dark') {
    const html = document.documentElement;
    
    if (theme === 'light') {
      html.classList.remove('dark');
    } else {
      html.classList.add('dark');
    }
    
    updateSettings({ theme });
  }
  
  function exportData() {
    try {
      const jsonData = exportJSON();
      const blob = new Blob([jsonData], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `adhd-hub-backup-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      // Show success message
      showMessage('Data exported successfully!', 'success');
    } catch (error) {
      console.error('Export failed:', error);
      showMessage('Failed to export data. Please try again.', 'error');
    }
  }
  
  function handleImport(file: File) {
    const reader = new FileReader();
    reader.onload = (event) => {
      try {
        const jsonString = event.target?.result as string;
        importJSON(jsonString);
        
        // Reload data and update display
        loadSettings();
        showMessage('Data imported successfully! Page will reload in 3 seconds.', 'success');
        
        setTimeout(() => {
          window.location.reload();
        }, 3000);
      } catch (error) {
        console.error('Import failed:', error);
        showMessage('Failed to import data. Please check the file format.', 'error');
      }
    };
    reader.readAsText(file);
  }
  
  function clearAllData() {
    const confirmed = confirm(
      'Are you sure you want to clear all data? This will permanently delete:\n\n' +
      '• All resources\n' +
      '• All goals\n' +
      '• All study sessions\n' +
      '• All settings\n\n' +
      'This action cannot be undone!'
    );
    
    if (!confirmed) return;
    
    const doubleConfirm = confirm(
      'This is your final warning. Are you absolutely sure you want to delete everything?'
    );
    
    if (!doubleConfirm) return;
    
    try {
      // Clear localStorage
      localStorage.removeItem('adhd-hub-data');
      localStorage.removeItem('timer-state');
      
      showMessage('All data cleared successfully! Page will reload in 2 seconds.', 'success');
      
      setTimeout(() => {
        window.location.reload();
      }, 2000);
    } catch (error) {
      console.error('Clear data failed:', error);
      showMessage('Failed to clear data. Please try again.', 'error');
    }
  }
  
  function showMessage(message: string, type: 'success' | 'error') {
    // Remove any existing messages
    const existingMessage = document.getElementById('settings-message');
    if (existingMessage) {
      existingMessage.remove();
    }
    
    // Create new message
    const messageEl = document.createElement('div');
    messageEl.id = 'settings-message';
    messageEl.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg font-medium ${
      type === 'success' 
        ? 'bg-green-100 text-green-800 border border-green-200 dark:bg-green-900 dark:text-green-200 dark:border-green-700'
        : 'bg-red-100 text-red-800 border border-red-200 dark:bg-red-900 dark:text-red-200 dark:border-red-700'
    }`;
    messageEl.textContent = message;
    
    document.body.appendChild(messageEl);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (messageEl && messageEl.parentNode) {
        messageEl.remove();
      }
    }, 5000);
  }
  
  // Event listeners
  document.querySelectorAll('input[name="theme"]').forEach(input => {
    input.addEventListener('change', (e) => {
      const theme = (e.target as HTMLInputElement).value as 'light' | 'dark';
      handleThemeChange(theme);
    });
  });
  
  document.getElementById('export-data-btn')?.addEventListener('click', exportData);
  
  document.getElementById('import-file-input')?.addEventListener('change', (e) => {
    const file = (e.target as HTMLInputElement).files?.[0];
    if (file) {
      const fileNameSpan = document.getElementById('import-file-name')!;
      fileNameSpan.textContent = file.name;
      handleImport(file);
    }
  });
  
  document.getElementById('clear-data-btn')?.addEventListener('click', clearAllData);
  
  // Initialize
  loadSettings();
</script>