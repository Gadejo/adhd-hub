---
import Layout from '../layouts/Layout.astro';
import TopBar from '../components/TopBar.astro';
---

<Layout title="ADHD Hub - Subjects">
  <TopBar title="ADHD Hub" />
  
  <main class="flex-1 p-4 md:p-6 lg:p-8">
    <div class="max-w-7xl mx-auto">
      <div class="flex justify-between items-center mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Subjects</h1>
          <p class="text-gray-600 dark:text-gray-400">Manage your study subjects and view their progress</p>
        </div>
        <button 
          id="create-subject-btn"
          class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors"
        >
          Create Subject
        </button>
      </div>
      
      <!-- Templates Section -->
      <div class="mb-8">
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Templates</h2>
        <p class="text-gray-600 dark:text-gray-400 mb-4">Start with a pre-configured subject template</p>
        <div id="templates-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <!-- Templates will be loaded here -->
        </div>
      </div>
      
      <!-- User Subjects Section -->
      <div>
        <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Your Subjects</h2>
        <div id="subjects-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- User subjects will be loaded here -->
        </div>
        
        <div id="no-subjects" class="text-center py-12 hidden">
          <div class="text-gray-400 dark:text-gray-500 mb-4">
            <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No subjects yet</h3>
          <p class="text-gray-600 dark:text-gray-400 mb-4">Create your first subject from a template or start from scratch.</p>
          <button 
            class="create-subject-trigger px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition-colors"
          >
            Create Your First Subject
          </button>
        </div>
      </div>
    </div>
  </main>
  
  <!-- Create/Edit Subject Modal -->
  <div id="subject-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full">
        <div class="p-6">
          <div class="flex justify-between items-center mb-4">
            <h3 id="modal-title" class="text-lg font-semibold text-gray-900 dark:text-white">Create Subject</h3>
            <button id="close-modal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <form id="subject-form" class="space-y-4">
            <input type="hidden" id="subject-id">
            <input type="hidden" id="template-id">
            
            <div>
              <label for="subject-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Subject Name *
              </label>
              <input 
                type="text" 
                id="subject-name"
                required
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
            </div>
            
            <div>
              <label for="subject-description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Description
              </label>
              <textarea 
                id="subject-description"
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              ></textarea>
            </div>
            
            <div>
              <label for="subject-color" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Color
              </label>
              <div class="flex items-center space-x-3">
                <input 
                  type="color" 
                  id="subject-color"
                  value="#3B82F6"
                  class="w-12 h-8 rounded border border-gray-300 dark:border-gray-600"
                >
                <span id="color-value" class="text-sm text-gray-600 dark:text-gray-400">#3B82F6</span>
              </div>
            </div>
            
            <div class="flex justify-end space-x-3 pt-4">
              <button 
                type="button" 
                id="cancel-btn"
                class="px-4 py-2 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                Cancel
              </button>
              <button 
                type="submit"
                class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md transition-colors"
              >
                Save Subject
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { getAll, saveSubject, updateSubject, deleteSubject, createSubjectFromTemplate, updateSubjectStats } from '../lib/storage.js';
  import type { Subject } from '../lib/models.js';
  
  let allSubjects: Subject[] = [];
  let editingId: string | null = null;
  let fromTemplateId: string | null = null;
  
  // DOM elements
  const templatesGrid = document.getElementById('templates-grid')!;
  const subjectsGrid = document.getElementById('subjects-grid')!;
  const noSubjectsEl = document.getElementById('no-subjects')!;
  const modal = document.getElementById('subject-modal')!;
  const modalTitle = document.getElementById('modal-title')!;
  const form = document.getElementById('subject-form') as HTMLFormElement;
  
  // Form elements
  const subjectIdInput = document.getElementById('subject-id') as HTMLInputElement;
  const templateIdInput = document.getElementById('template-id') as HTMLInputElement;
  const nameInput = document.getElementById('subject-name') as HTMLInputElement;
  const descriptionTextarea = document.getElementById('subject-description') as HTMLTextAreaElement;
  const colorInput = document.getElementById('subject-color') as HTMLInputElement;
  const colorValue = document.getElementById('color-value')!;
  
  function loadSubjects() {
    updateSubjectStats(); // Update stats first
    const data = getAll();
    allSubjects = data.subjects;
    renderTemplates();
    renderSubjects();
  }
  
  function renderTemplates() {
    const templates = allSubjects.filter(s => s.isTemplate);
    templatesGrid.innerHTML = templates.map(template => `
      <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-4">
        <div class="flex items-center mb-3">
          <div 
            class="w-4 h-4 rounded-full mr-3" 
            style="background-color: ${template.color}"
          ></div>
          <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${template.name}</h3>
        </div>
        ${template.description ? `<p class="text-sm text-gray-600 dark:text-gray-400 mb-4">${template.description}</p>` : ''}
        <button 
          class="use-template-btn w-full px-3 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded transition-colors"
          data-template-id="${template.id}"
        >
          Use Template
        </button>
      </div>
    `).join('');
    
    // Attach template button listeners
    document.querySelectorAll('.use-template-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const templateId = (e.currentTarget as HTMLElement).dataset.templateId!;
        createFromTemplate(templateId);
      });
    });
  }
  
  function renderSubjects() {
    const userSubjects = allSubjects.filter(s => !s.isTemplate);
    
    if (userSubjects.length === 0) {
      subjectsGrid.innerHTML = '';
      noSubjectsEl.classList.remove('hidden');
    } else {
      noSubjectsEl.classList.add('hidden');
      subjectsGrid.innerHTML = userSubjects.map(subject => `
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-6">
          <div class="flex items-start justify-between mb-4">
            <div class="flex items-center">
              <div 
                class="w-5 h-5 rounded-full mr-3" 
                style="background-color: ${subject.color}"
              ></div>
              <div>
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">${subject.name}</h3>
                ${subject.description ? `<p class="text-sm text-gray-600 dark:text-gray-400">${subject.description}</p>` : ''}
              </div>
            </div>
            
            <div class="flex items-center space-x-2">
              <button 
                class="edit-btn p-1 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                data-id="${subject.id}"
                aria-label="Edit subject"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
              </button>
              <button 
                class="delete-btn p-1 text-gray-400 hover:text-red-600 dark:hover:text-red-400 transition-colors"
                data-id="${subject.id}"
                aria-label="Delete subject"
              >
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-4 text-sm">
            <div class="text-center p-3 bg-gray-50 dark:bg-gray-700 rounded">
              <div class="font-semibold text-gray-900 dark:text-white">${subject.stats.totalStudyTime}</div>
              <div class="text-gray-600 dark:text-gray-400">Minutes</div>
            </div>
            <div class="text-center p-3 bg-gray-50 dark:bg-gray-700 rounded">
              <div class="font-semibold text-gray-900 dark:text-white">${subject.stats.completedResources}/${subject.stats.totalResources}</div>
              <div class="text-gray-600 dark:text-gray-400">Resources</div>
            </div>
            <div class="text-center p-3 bg-gray-50 dark:bg-gray-700 rounded">
              <div class="font-semibold text-gray-900 dark:text-white">${subject.stats.completedGoals}/${subject.stats.totalGoals}</div>
              <div class="text-gray-600 dark:text-gray-400">Goals</div>
            </div>
            <div class="text-center p-3 bg-gray-50 dark:bg-gray-700 rounded">
              <div class="font-semibold text-gray-900 dark:text-white">
                ${subject.stats.lastStudied ? new Date(subject.stats.lastStudied).toLocaleDateString() : 'Never'}
              </div>
              <div class="text-gray-600 dark:text-gray-400">Last Studied</div>
            </div>
          </div>
        </div>
      `).join('');
      
      // Attach event listeners
      attachSubjectEventListeners();
    }
  }
  
  function attachSubjectEventListeners() {
    // Edit buttons
    document.querySelectorAll('.edit-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const id = (e.currentTarget as HTMLElement).dataset.id!;
        editSubject(id);
      });
    });
    
    // Delete buttons
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const id = (e.currentTarget as HTMLElement).dataset.id!;
        deleteSubjectConfirm(id);
      });
    });
  }
  
  function showModal(title: string) {
    modalTitle.textContent = title;
    modal.classList.remove('hidden');
    nameInput.focus();
  }
  
  function hideModal() {
    modal.classList.add('hidden');
    form.reset();
    editingId = null;
    fromTemplateId = null;
    colorInput.value = '#3B82F6';
    colorValue.textContent = '#3B82F6';
  }
  
  function createFromTemplate(templateId: string) {
    const template = allSubjects.find(s => s.id === templateId);
    if (!template) return;
    
    fromTemplateId = templateId;
    templateIdInput.value = templateId;
    nameInput.value = template.name;
    descriptionTextarea.value = template.description || '';
    colorInput.value = template.color;
    colorValue.textContent = template.color;
    
    showModal('Create Subject from Template');
  }
  
  function editSubject(id: string) {
    const subject = allSubjects.find(s => s.id === id);
    if (!subject) return;
    
    editingId = id;
    subjectIdInput.value = id;
    nameInput.value = subject.name;
    descriptionTextarea.value = subject.description || '';
    colorInput.value = subject.color;
    colorValue.textContent = subject.color;
    
    showModal('Edit Subject');
  }
  
  function deleteSubjectConfirm(id: string) {
    const subject = allSubjects.find(s => s.id === id);
    if (!subject) return;
    
    if (confirm(`Are you sure you want to delete "${subject.name}"? This action cannot be undone.`)) {
      deleteSubject(id);
      loadSubjects();
    }
  }
  
  // Event listeners
  document.getElementById('create-subject-btn')?.addEventListener('click', () => showModal('Create Subject'));
  document.querySelector('.create-subject-trigger')?.addEventListener('click', () => showModal('Create Subject'));
  document.getElementById('close-modal')?.addEventListener('click', hideModal);
  document.getElementById('cancel-btn')?.addEventListener('click', hideModal);
  
  // Color picker update
  colorInput.addEventListener('input', (e) => {
    colorValue.textContent = (e.target as HTMLInputElement).value;
  });
  
  // Form submission
  form.addEventListener('submit', (e) => {
    e.preventDefault();
    
    const subjectData = {
      name: nameInput.value,
      description: descriptionTextarea.value,
      color: colorInput.value,
      isTemplate: false,
      stats: { totalStudyTime: 0, totalResources: 0, completedResources: 0, totalGoals: 0, completedGoals: 0 }
    };
    
    if (editingId) {
      updateSubject(editingId, subjectData);
    } else if (fromTemplateId) {
      createSubjectFromTemplate(fromTemplateId, nameInput.value);
    } else {
      saveSubject(subjectData);
    }
    
    hideModal();
    loadSubjects();
  });
  
  // Close modal on outside click
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      hideModal();
    }
  });
  
  // Initialize
  loadSubjects();
</script>